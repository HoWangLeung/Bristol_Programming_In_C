The extension.c is for the implementation of a faster search technique.
The main idea is to make sure that each column has only a single '1', then we can simply move up or move down depending on the shortest distance to the top.
Similar to the standard exercise, there is a big list to store the steps and there is the index f to keep track of the big list

Here are the main steps:
1. look in the board, if there are '1' already in the 1st row, then just proceed because they are already in the correct location
2. start searching from the 2nd row,locate the first '1' in the board  , check if top and bottom has another '1' in the same column
3. if yes:
        check is it shorter to go left or go right (wrapping is also considered) and move
        add the move to the big list
   if no:
        this implies that there is only a single '1' in the column
        determine if the shortest path to reach the 1st row is going up or going down and move with the faster direction
        add the move to the big list
4. add 1 to f , if there are more boards in the list, go to step 2 and consider the board at the front of the list (index f).

The main advantage of adopting this approach is reducing the amount of execution time from minutes to less then a second
################ Example 1 6x6m4.rbd #########################
0:
101010
000000
000000
000000
010000
000101

1:
101010
000000
000000
000000
000000
010101

2:
111010
000000
000000
000000
000000
000101

3:
111110
000000
000000
000000
000000
000001

4:
111111
000000
000000
000000
000000
000000
################ Example 2  6x6m6.rbd #########################
0:
101010
000000
000000
000000
100001
000100

1:
101010
000000
000000
000000
110000
000100

2:
101010
000000
000000
000000
011000
000100

3:
101010
000000
000000
000000
001000
010100

4:
101010
000000
000000
000000
000100
010100

5:
101010
000000
000000
000000
000010
010100

6:
101010
000000
000000
000000
000001
010100

7:
101010
000000
000000
000000
000000
010101

8:
111010
000000
000000
000000
000000
000101

9:
111110
000000
000000
000000
000000
000001

10:
111111
000000
000000
000000
000000
000000

