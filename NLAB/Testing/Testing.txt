#============================
#==========STRATEGIES========
#============================

The main testing strategy is to modularize the functions into sub-folders and sub-functions

The entry point of the testing is Testing/test.c
Testing/PARSER_DATA: contains tests for parser
Testing/INTERP_DATA: contains tests for interpreter
Testing/HELPER/helper.c: contains functions that helps testing


user should compile with 1 of the 2 flags depending on the purpose of testing
1. -DPARSER 
2. -DINTERP 

In the actual program, user would want the program to exit and inform the location of the failure.
However, in test mode, user would not want the program to exit during negative cases testing.
A macro called 'ERROR()'  was implemented to solve this problem:
When the following flag is applied, the function returns false instead of exit
When the following flag is NOT applied, the function exits and print debug info instead of returning false
-DTESTMODE
    

Each grammar function is designed to return a boolean value so that it can be tested individually
Each grammar function has it's folder and it's C FILENAME
    In each of these C files, the first function contains an array of test data.
    The second function calls the first function and copy the test Data by specifying the index of the data
    With the data copied, assertion test can then performed within the second function
The main advantage of this implementation is that it makes the testing highly scalable, 
each function can be tested with dozens of test data without making the code look messy.



#===========================
#==========STRUCTURE========
#===========================
Testing
├── HELPER
│   └── helper.c
├── INTERP_DATA
│   └── Prog
│       ├── test_prog.c
│       └── tmp.txt
├── PARSER_DATA
│   ├── BINARYOP
│   │   └── test_binaryop.c
│   ├── COLS
│   │   └── test_cols.c
│   ├── CREATE
│   │   └── test_create.c
│   ├── FILENAME
│   │   └── test_filename.c
│   ├── INSTRC
│   │   └── test_instrc.c
│   ├── INSTRCLIST
│   │   └── test_instrclist.c
│   ├── INTEGER
│   │   └── test_integer.c
│   ├── LOOP
│   │   └── test_loop.c
│   ├── POLISH
│   │   └── test_polish.c
│   ├── POLISHLIST
│   │   └── test_polishlist.c
│   ├── PRINT
│   │   └── test_print.c
│   ├── PROG
│   │   └── test_prog.c
│   ├── PUSHDOWN
│   │   └── test_pushdown.c
│   ├── ROWS
│   │   └── test_rows.c
│   ├── SET
│   │   └── test_set.c
│   ├── STRING
│   │   └── test_string.c
│   ├── UNARYOP
│   │   └── test_unaryop.c
│   ├── VARNAME
│   │   └── test_varname.c
│   └── parse_test_data.c
├── Testing.txt
├── test
├── test.c
├── test.h
└── test_interp